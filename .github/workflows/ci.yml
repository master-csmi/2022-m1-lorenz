name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: RelWithDebInfo

  # Conan cache environment variables
  CONAN_SYSREQUIRES_MODE: enabled
  CONAN_USER_HOME: "${{ github.workspace }}/conan-cache"
  CONAN_USER_HOME_SHORT: "${{ github.workspace }}/conan-cache/short"

jobs:
  build_cpp:

    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [self-ubuntu-22.04]
      

    steps:
    - uses: actions/checkout@v2
    - name: Checkout submodules
      run: git submodule update --init 
    - name: Cache
      uses: actions/cache@v2
      env:
        cache-name: cache-conan-modules
      with:
        path: |
          ${{ env.CONAN_USER_HOME }}
          ~/.cache/pip
        key: ${{ runner.os }}-${{ env.BUILD_TYPE }}-${{ hashFiles('CMakeLists.txt') }}-${{ hashFiles('cmake/Conan.cmake') }}

    - name: Create Build Environment
      # Some projects don't allow in-source building, so create a separate build directory
      # We'll use this as our working directory for all subsequent commands
      run: |
        python3 -m pip install --upgrade pip setuptools
        python3 -m pip install -r requirements.txt
        cmake -E make_directory ${{runner.workspace}}/build
    - name: Configure CMake
      run: cmake --preset default
    - name: Build
      run: cmake --build --preset default
    - name: Test
      run: ctest --preset default
    
  build_python:

    runs-on: self-ubuntu-22.04
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.8"]
        # python-version: ["3.8", "3.9", "3.10"]
    if: |
      !contains(github.event.head_commit.message, 'skip build')
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v3
      with:   
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install flake8 pytest
        pip install -r requirements.txt
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    - name: Setup PYTHONPATH
      run: |
        echo "PYTHONPATH=src/python:$HOME/.local" >> $GITHUB_ENV
    - name: Test with pytest
      run: |
        pytest-3

  docs:

    runs-on: self-ubuntu-22.04
    if: |
      !contains(github.event.head_commit.message, 'skip docs')
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python 3.8
        uses: actions/setup-python@v3
        with:   
          python-version: 3.8
      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Setup PYTHONPATH
        run: |
          echo "PYTHONPATH=../../src/python" >> $GITHUB_ENV 
      - name: Generate Documentation
        run: |
          cmake --preset docs
          cmake --build --preset docs docs
      - name: Deploy ðŸš€
        uses: JamesIves/github-pages-deploy-action@v4.3.3
        with:
          branch: gh-pages # The branch the action should deploy to.
          folder: build/docs/docs/sphinx/ # The folder the action should deploy.
